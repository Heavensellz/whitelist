local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Define a function to check if a value is in a table
local function isInTable(value, table)
    for _, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end

-- Vars
local MainEvent = ReplicatedStorage.MainEvent
local SpoofTable = {
    WalkSpeed = 16,
    JumpPower = 50
}

-- // Configuration
local Flags = {
    "CHECKER_1",
    "TeleportDetect",
    "OneMoreTime"
}

-- // __namecall hook
local __namecall = hookmetamethod(game, "__namecall", function(...)
    -- Vars
    local args = {...}
    local self = args[1]
    local method = getnamecallmethod()
    local caller = getcallingscript()

    -- Check if the game is trying to alert the server
    if method == "FireServer" and self == MainEvent and isInTable(args[2], Flags) then
        return
    end

    -- Anti Crash
    if not checkcaller() and getfenv(2).crash then
        -- Hook the crash function to make it not work
        hookfunction(getfenv(2).crash, function()
            warn("Crash Attempt")
        end)
    end

    return __namecall(...)
end)

-- // __index hook
local __index = hookmetamethod(game, "__index", function(t, k)
    -- Make sure it's trying to get our humanoid's ws/jp
    if not checkcaller() and t:IsA("Humanoid") and (k == "WalkSpeed" or k == "JumpPower") then
        -- Return spoof values
        return SpoofTable[k]
    end

    return __index(t,k)
end)

-- // __newindex hook
local __newindex = hookmetamethod(game, "__newindex", function(t, k, v)
    -- Make sure it's trying to set our humanoid's ws/jp
    if not checkcaller() and t:IsA("Humanoid") and (k == "WalkSpeed" or k == "JumpPower") then
        -- Add values to spoof table
        SpoofTable[k] = v

        -- Disallow the set
        return
    end

    return __newindex(t, k, v)
end)
